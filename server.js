require("dotenv").config();
const express = require("express");
const mongoose = require("mongoose");
const bcrypt = require("bcryptjs");
const cors = require("cors");
const { v4: uuidv4 } = require("uuid");
const path = require("path");
const nodemailer = require("nodemailer");
const jwt = require("jsonwebtoken");
const cookieParser = require("cookie-parser");
const crypto = require("crypto");
const app = express();
const orderRoutes = require("./routes/orderRoutes");
const { protect } = require('./middleware/authMiddleware');
const Order = require('./models/Order');
const User = require('./models/User');
const Product = require("./models/Products");  
const fs = require('fs');
const reviewsFile = 'reviews.json';
const Review = require('./models/Review');
const Joi = require("joi");
const sendEmail = require("./utils/sendEmail");

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
const allowedOrigins = [
  'https://makadamia.onrender.com', // –ü–µ—Ä–≤—ã–π —Å–∞–π—Ç
  'https://mobile-site.onrender.com', // –í—Ç–æ—Ä–æ–π —Å–∞–π—Ç
  'http://localhost:3000' // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
];

console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ /refresh");

const corsOptions = {
    origin: (origin, callback) => {
        const allowedOrigins = [
            "https://makadamia-e0hb.onrender.com",
            "https://mobile-site.onrender.com",
            "http://localhost:3000"
        ];
        if (!origin || allowedOrigins.includes(origin)) {
            callback(null, true);
        } else {
            callback(new Error("Not allowed by CORS"));
        }
    },
    credentials: true, // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ s!
};
app.use(express.json());
app.use(cors(corsOptions));
// –ò—Å–ø–æ–ª—å–∑—É–µ–º CORS —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
app.use(cors(corsOptions));
app.use(cookieParser());
app.use('/api', orderRoutes);
// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
const JWT_SECRET = process.env.JWT_SECRET || "ai3ohPh3Aiy9eeThoh8caaM9voh5Aezaenai0Fae2Pahsh2Iexu7Qu/";
const mongoURI = process.env.MONGO_URI || "mongodb://11_whatslide:0a53b4a821bb53479e0982d4f721befc9b406376@odl9-t.h.filess.io:61004/11_whatslide";
const REFRESH_SECRET = process.env.REFRESH_SECRET || "J8$GzP1d&KxT^m4YvNcR";
mongoose.connect(mongoURI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
  ssl: false, // –í–∫–ª—é—á–µ–Ω–æ SSL
})
  .then(() => console.log("MongoDB connected"))
  .catch((error) => console.error("MongoDB connection error:", error));

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ä–æ–∫–∞ –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞
function isTokenExpired(token) {
    try {
        const payload = JSON.parse(atob(token.split(".")[1])); // –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
        return payload.exp * 1000 < Date.now(); // –ï—Å–ª–∏ exp –≤ –ø—Ä–æ—à–ª–æ–º ‚Äî —Ç–æ–∫–µ–Ω –∏—Å—Ç—ë–∫
    } catch (e) {
        return true; // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
    }
}


// –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ HTTP –Ω–∞ HTTPS
app.use((req, res, next) => {
    if (process.env.NODE_ENV === "production") {
        console.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞:", req.headers["x-forwarded-proto"]);
        if (req.headers["x-forwarded-proto"] !== "https") {
            console.log("üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ HTTPS...");
            return res.redirect(`https://${req.headers.host}${req.url}`);
        }
    }
    next();
});

const Cart = require("./models/Cart"); // –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–æ–¥–µ–ª—å
app.post('/cart/add', protect, async (req, res) => {
  try {
    if (!req.user || !req.user.id) {
      return res.status(401).json({ message: '–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É' });
    }

    const { productId, quantity } = req.body;
    const userId = req.user.id;

    let cart = await Cart.findOne({ userId });

    if (!cart) {
      cart = new Cart({ userId, items: [] });
    }

    const existingItem = cart.items.find(item => item.productId.toString() === productId);

    if (existingItem) {
      existingItem.quantity += quantity;
    } else {
      cart.items.push({ productId, quantity });
    }

    await cart.save();
    res.status(200).json({ message: "–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É", cart });

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –£–∫–∞–∑–∞–Ω–∏–µ –ø–∞–ø–∫–∏ —Å–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏
app.use(express.static(path.join(__dirname, "public")));
app.get('/user-orders', protect, async (req, res) => {
  try {
    const orders = await Order.find({ userId: req.user.id }).sort({ createdAt: -1 });
    res.json(orders);
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤" });
  }
});
// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –ø–æ ID
app.get('/s/:id', async (req, res) => {
  try {
    const product = await Products.findById(req.params.id); // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Products, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –≤–∞—à–∞ –º–æ–¥–µ–ª—å
    if (!product) {
      return res.status(404).json({ message: 'Product not found' });
    }
    res.json(product);  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:", error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞' });
  }
});

app.get('/api/products', async (req, res) => {
    try {
        const products = await Products.find();  // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Products, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –≤–∞—à–∞ –º–æ–¥–µ–ª—å
        res.json(products);
    } catch (err) {
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤" });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
app.get('/orders', async (req, res) => {
    try {
        const orders = await Order.find().populate('items.productId');
        res.json(orders);
    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:", err);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤" });
    }
});
app.post("/api/order", protect, async (req, res) => {
    try {
        const { items, address, additionalInfo, createdAt } = req.body;

        if (!items || items.length === 0) {
            return res.status(400).json({ message: "–ö–æ—Ä–∑–∏–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π" });
        }

        const newOrder = new Order({
            userId: req.user.id,
            address,
            additionalInfo,
            items,
            createdAt,
        });

        await newOrder.save();

        res.status(201).json({ message: "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω", order: newOrder });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞", error: error.message });
    }
});
app.get("/verify-email", async (req, res) => {
  const { token, email } = req.query;

  const user = await User.findOne({
    emailVerificationToken: token,
    emailVerificationExpires: { $gt: Date.now() },
    $or: [{ email }, { pendingEmail: email }]
  });

  if (!user) return res.status(400).send("‚ùå –°—Å—ã–ª–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–∞");

  user.emailVerified = true;
  if (user.pendingEmail === email) {
    user.email = user.pendingEmail;
    user.pendingEmail = undefined;
  }

  user.emailVerificationToken = undefined;
  user.emailVerificationExpires = undefined;
  await user.save();

  res.send("‚úÖ Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –ú–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.");
});


app.post("/resend-verification", async (req, res) => {
  const { userId } = req.body;

  const user = await User.findById(userId);
  if (!user) return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
  if (user.emailVerified) return res.status(400).json({ message: "–ü–æ—á—Ç–∞ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞" });

  const token = crypto.randomBytes(32).toString("hex");
  user.emailVerificationToken = token;
  user.emailVerificationExpires = Date.now() + 24 * 60 * 60 * 1000;
  await user.save();

  const verifyUrl = `https://makadamia-app-etvs.onrender.com/verify-email?token=${token}&email=${user.email}`;

  await transporter.sendMail({
    from: '"Makadamia" <seryojabaulin25@gmail.com>',
    to: user.email,
    subject: "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ—á—Ç—ã",
    html: `
      <h2>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É</h2>
      <p>–ù–∞–∂–º–∏—Ç–µ <a href="${verifyUrl}">—Å—é–¥–∞</a>, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email.</p>
      <p><small>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è ‚Äî 24 —á–∞—Å–∞.</small></p>
    `
  });

  res.json({ message: "–ü–∏—Å—å–º–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–æ—á—Ç—É." });
});
const transporter = nodemailer.createTransport({
  service: "gmail", // –∏–ª–∏ 'yandex', 'mail.ru', 'smtp.yourhost.com'
  auth: {
    user: "seryojabaulin25@gmail.com",     // ‚Üê –¢–í–û–ô EMAIL
    pass: "exwtwuflxjzonrpa"         // ‚Üê –ü–∞—Ä–æ–ª—å –∏–ª–∏ App Password
  }
});
// –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
app.post('/request-password-reset', async (req, res) => {
  const { email } = req.body;
  const user = await User.findOne({ email });

  if (!user) return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });

  const resetToken = crypto.randomBytes(32).toString('hex');
  user.resetToken = resetToken;
  user.resetTokenExpiration = Date.now() + 15 * 60 * 1000;
  await user.save();

  const resetLink = `https://makadamia-e0hb.onrender.com/reset.html?token=${resetToken}`;

  await sendEmail(user.email, "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è", `
    <h3>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${user.username}!</h3>
    <p>–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –Ω–∞ —Å–∞–π—Ç–µ Makadamia.</p>
    <p><a href="${resetLink}">${resetLink}</a></p>
    <p><small>–°—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.</small></p>
  `);

  res.json({ message: "üì® –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" });
});

app.post('/reset-password/:token', async (req, res) => {
  const { token } = req.params;
  const { password } = req.body;

  const user = await User.findOne({
    resetToken: token,
    resetTokenExpiration: { $gt: Date.now() }
  });

  if (!user) {
    return res.status(400).json({ message: "–°—Å—ã–ª–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞" });
  }

  user.password = await bcrypt.hash(password, 12);
  user.resetToken = undefined;
  user.resetTokenExpiration = undefined;
  await user.save();

  res.json({ message: "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω" });
});
// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/user-orders/:userId', protect, async (req, res) => {
    try {
        const orders = await Order.find({ userId: req.params.userId }).populate("items.productId", "name price");
        res.json(orders);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤" });
    }
});
app.get('/reviews', async (req, res) => {
    try {
        const reviews = await Review.find().sort({ date: -1 });
        res.json(reviews);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤' });
    }
});

app.post('/reviews', protect, async (req, res) => {
    try {
        const { rating, comment, displayName } = req.body;
        const user = await User.findById(req.user.id);
        
        if (!user) {
            return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        const review = new Review({
            rating,
            comment,
            username: user.username,
            displayName: displayName || null,
            userId: user._id
        });

        await review.save();

        // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        const reviews = readReviews();
        reviews.push({
            id: review._id.toString(),
            rating: review.rating,
            comment: review.comment,
            username: review.username,
            displayName: review.displayName,
            date: review.date
        });
        saveReviews(reviews);

        res.status(201).json(review);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞' });
    }
});



// –§—É–Ω–∫—Ü–∏—è —á—Ç–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
function readReviews() {
    if (!fs.existsSync(reviewsFile)) {
        return [];
    }
    try {
        return JSON.parse(fs.readFileSync(reviewsFile, 'utf8'));
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤:", error);
        return [];
    }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ –≤ —Ñ–∞–π–ª
function saveReviews(reviews) {
    try {
        fs.writeFileSync(reviewsFile, JSON.stringify(reviews, null, 2), 'utf8');
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤:", error);
    }
}

function generateTokens(user, site) {
    const issuedAt = Math.floor(Date.now() / 1000);
    
    const accessToken = jwt.sign(
        { id: user._id, username: user.username, site: "https://makadamia-e0hb.onrender.com", iat: issuedAt },
        JWT_SECRET,
        { expiresIn: "30m" }  // ‚è≥ Access-—Ç–æ–∫–µ–Ω –Ω–∞ 30 –º–∏–Ω—É—Ç
    );

    const refreshToken = jwt.sign(
        { id: user._id, username: user.username, site: "https://makadamia-e0hb.onrender.com", iat: issuedAt },
        REFRESH_SECRET,
        { expiresIn: "7d" }  // üîÑ Refresh-—Ç–æ–∫–µ–Ω –Ω–∞ 7 –¥–Ω–µ–π
    );

    return { accessToken, refreshToken };
}




// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/register', async (req, res) => {
  const schema = Joi.object({
    username: Joi.string().trim().min(3).max(30).required(),
    password: Joi.string().min(8).required(),
    email: Joi.string().email().required()
  });

  const { error } = schema.validate(req.body);
  if (error) {
    return res.status(400).json({ message: error.details[0].message });
  }

  const { username, password, email } = req.body;

  const usernameRegex = /^[a-zA-Z0-9_]+$/;
  if (!usernameRegex.test(username)) {
    return res.status(400).json({ message: "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è" });
  }

  try {
    console.log("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", username);

    const existingUser = await User.findOne({ username });
    if (existingUser) {
      return res.status(409).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    }

    const hashedPassword = await bcrypt.hash(password, 12);
    const newUser = new User({ username, password: hashedPassword, email });

    await newUser.save();

    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${username}" —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.`);
    return res.status(201).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω' });

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", err);
    return res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', error: err.message });
  }
});
// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/login', async (req, res) => {
    const { username, password } = req.body;

    const user = await User.findOne({ username });
    if (!user || !(await bcrypt.compare(password, user.password))) {
        return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
    }

    const { accessToken, refreshToken } = generateTokens(user);
    res.setHeader("Access-Control-Allow-Credentials", "true"); // ‚úÖ –î–æ–±–∞–≤–∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    res.cookie("refreshTokenPC", refreshToken, {
    httpOnly: true,
    secure: true,
    sameSite: "None",
    path: "/",
    domain: "makadamia-e0hb.onrender.com", // üí° —Å—Ç—Ä–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ–º–µ–Ω
    maxAge: 30 * 24 * 60 * 60 * 1000
});
    res.json({ accessToken, userId: user._id });
});


// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ü–ö-–≤–µ—Ä—Å–∏–∏
app.post('/refresh', async (req, res) => {
    const refreshToken = req.cookies.refreshTokenPC;

    if (!refreshToken) {
        console.error("‚ùå Refresh-—Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ cookies");
        return res.status(401).json({ message: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" });
    }

    console.log("üîç –ü–æ–ª—É—á–µ–Ω–Ω—ã–π refreshToken:", refreshToken);
    
    jwt.verify(refreshToken, REFRESH_SECRET, async (err, decoded) => {
        if (err) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ refresh-—Ç–æ–∫–µ–Ω–∞:", err.message);
            
res.clearCookie("refreshTokenPC", {
  httpOnly: true,
  secure: true,
  sameSite: 'None',
  path: "/",
  domain: "makadamia-e0hb.onrender.com"
});

            return res.status(403).json({ message: "Refresh-—Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫" });
        }

        if (!decoded.exp || (decoded.exp * 1000 < Date.now())) {
            console.error("‚ùå Refresh-—Ç–æ–∫–µ–Ω –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –∏—Å—Ç—ë–∫!");
            res.clearCookie("refreshTokenPC", { path: "/" });
            return res.status(403).json({ message: "Refresh-—Ç–æ–∫–µ–Ω –∏—Å—Ç—ë–∫" });
        }

        try {
            const user = await User.findById(decoded.id);
            if (!user) {
                console.error("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ ID:", decoded.id);
                return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
            }

            const { accessToken, refreshToken: newRefreshToken } = generateTokens(user);
            res.setHeader("Access-Control-Allow-Credentials", "true"); // ‚úÖ –î–æ–±–∞–≤–∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            res.cookie("refreshTokenDesktop", newRefreshToken, {
                httpOnly: true,
                secure: true,
                sameSite: "None",
                path: "/",
                maxAge: 30 * 24 * 60 * 60 * 1000  // 30 –¥–Ω–µ–π
            });

            console.log("‚úÖ Refresh-—Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω —É—Å–ø–µ—à–Ω–æ");

            // üöÄ –û—Ç–∫–ª—é—á–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
            res.setHeader("Access-Control-Allow-Credentials", "true"); // ‚úÖ –î–æ–±–∞–≤–∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            res.setHeader("Cache-Control", "no-cache, no-store, must-revalidate");
            res.setHeader("Pragma", "no-cache");
            res.setHeader("Expires", "0");

            res.json({ accessToken });

        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
            return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
        }
    });
});


app.post('/logout', (req, res) => {
    console.log("üîÑ –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞...");
    
res.clearCookie("refreshTokenPC", {
    httpOnly: true,
    secure: true,
    sameSite: 'None',
    path: "/",
    domain: "makadamia-e0hb.onrender.com"
});

    res.json({ message: '–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã' });
});


// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
app.post('/-token', (req, res) => {
  const { token: Token } = req.body;

  if (!Token) {
    return res.status(403).json({ message: '–¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
  }

  try {
    const user = jwt.verify(Token, JWT_SECRET);
    const newAccessToken = jwt.sign({ id: user.id }, JWT_SECRET, { expiresIn: '1h' });
    res.status(200).json({ token: newAccessToken });
  } catch (err) {
    res.status(403).json({ message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' });
  }
});
app.get("/confirm-email-change/:token", async (req, res) => {
  try {
    const user = await User.findOne({ emailVerificationToken: req.params.token });
    if (!user) return res.status(400).send("–ù–µ–≤–µ—Ä–Ω–∞—è –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∞—è —Å—Å—ã–ª–∫–∞");

    user.email = user.pendingEmail;
    user.pendingEmail = undefined;
    user.emailVerificationToken = undefined;
    user.emailVerified = true;
    await user.save();

    return res.send("‚úÖ –ü–æ—á—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥–∫—É.");
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email:", err);
    return res.status(500).send("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
  }
});
app.post("/account/resend-verification", protect, async (req, res) => {
  const user = await User.findById(req.user.id);
  if (!user || !user.pendingEmail) {
    return res.status(400).json({ message: "–ù–µ—Ç –Ω–æ–≤–æ–≥–æ email –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è" });
  }

  const now = Date.now();

  if (now - (user.emailVerificationLastSent || 0) < 60 * 1000) {
    return res.status(429).json({ message: "‚è± –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É" });
  }

  const token = crypto.randomBytes(32).toString("hex");
  user.emailVerificationToken = token;
  user.emailVerificationExpires = now + 24 * 60 * 60 * 1000;
  user.emailVerificationLastSent = now;
  await user.save();

  const verifyUrl = `https://makadamia-e0hb.onrender.com/verify-email?token=${token}&email=${user.pendingEmail}`;

  await sendEmail(user.pendingEmail, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ email", `
    <h2>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ—á—Ç—É</h2>
    <p>–ù–∞–∂–º–∏—Ç–µ <a href="${verifyUrl}">—Å—é–¥–∞</a>, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email: <b>${user.pendingEmail}</b>.</p>
    <p><small>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è ‚Äî 24 —á–∞—Å–∞.</small></p>
  `);

  res.json({ message: "üì® –ü–∏—Å—å–º–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" });
});


app.post("/account/email-change", protect, async (req, res) => {
  const { email } = req.body;
  const userId = req.user.id;

  const user = await User.findById(userId);
  if (!user) return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });

  const now = Date.now();

  if (now - (user.emailVerificationLastSent || 0) < 60 * 1000) {
    return res.status(429).json({ message: "‚è± –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É" });
  }

  const token = crypto.randomBytes(32).toString("hex");

  user.pendingEmail = email;
  user.emailVerificationToken = token;
  user.emailVerificationExpires = now + 24 * 60 * 60 * 1000;
  user.emailVerificationLastSent = now;
  await user.save();

  const verifyUrl = `https://makadamia-e0hb.onrender.com/verify-email?token=${token}&email=${email}`;

  await sendEmail(email, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ email", `
    <h2>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ—á—Ç—É</h2>
    <p>–ù–∞–∂–º–∏—Ç–µ <a href="${verifyUrl}">—Å—é–¥–∞</a>, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email: <b>${email}</b>.</p>
    <p><small>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è ‚Äî 24 —á–∞—Å–∞.</small></p>
  `);

  res.json({ email: user.email });
});


// –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
app.get('/private-route', protect, (req, res) => {
  res.json({ message: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${req.user.id}` });
});
app.get('/account', protect, async (req, res) => {
    try {
        if (!req.user || !req.user.id) {
            return res.status(401).json({ message: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" });
        }

        const user = await User.findById(req.user.id).select("username name city email");
        if (!user) {
            return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }
              // üöÄ –û—Ç–∫–ª—é—á–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        res.setHeader("Access-Control-Allow-Credentials", "true"); // ‚úÖ –î–æ–±–∞–≤–∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        res.setHeader("Cache-Control", "no-cache, no-store, must-revalidate");
        res.setHeader("Pragma", "no-cache");
        res.setHeader("Expires", "0");

res.json({
  username: user.username,
  name: user.name,
  city: user.city,
  email: user.email,
  emailVerified: user.emailVerified // ‚¨ÖÔ∏è –¥–æ–±–∞–≤–ª–µ–Ω–æ
});
    } catch (error) {  // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error: error.message });
    }
});
app.put('/account', protect, async (req, res) => {
    const { name, city, username, password, email } = req.body; // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞

    try {
        const user = await User.findById(req.user.id);
        if (!user) {
            return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        if (name) user.name = name;  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è
        if (city) user.city = city;  // –û–±–Ω–æ–≤–ª—è–µ–º –≥–æ—Ä–æ–¥
        if (username) user.username = username;  // –û–±–Ω–æ–≤–ª—è–µ–º username
        if (password) user.password = await bcrypt.hash(password, 12);  // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
        if (email && email !== user.email) {
    user.pendingEmail = email;

    const token = crypto.randomBytes(32).toString("hex");
    user.emailVerificationToken = token;
    user.emailVerificationExpires = Date.now() + 3600000; // 1 —á–∞—Å

    const verifyLink = `${user.site || "https://makadamia-e0hb.onrender.com"}/verify-email?token=${token}&email=${email}`;
    await transporter.sendMail({
      to: email,
      subject: "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ email",
      html: `<p>–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ email. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –µ–≥–æ –ø–æ —Å—Å—ã–ª–∫–µ:</p><p><a href="${verifyLink}">${verifyLink}</a></p>`
    });
}

        await user.save(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        res.json({ message: '–ê–∫–∫–∞—É–Ω—Ç –æ–±–Ω–æ–≤–ª—ë–Ω', user });
    } catch (error) {
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞', error: error.message });
    }
});
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
app.get("/", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "index.html"));
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
app.get("/connect", (req, res) => {
  res.send("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º —É—Å–ø–µ—à–Ω–æ!");
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ message: '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!', error: err.message });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404 –æ—à–∏–±–æ–∫
app.use((req, res) => {
  res.status(404).json({ message: "–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
});

// –ü–æ—Ä—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å–µ—Ä–≤–µ—Ä
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});
