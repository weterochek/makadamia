let cart = {};
let productMap = {}; // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
window.onload = function () {
    const userAgent = navigator.userAgent.toLowerCase();
    const currentURL = window.location.href;

    if (sessionStorage.getItem("redirected")) return; // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞

    if (userAgent.includes("mobile") && !currentURL.includes("mobile-site.onrender.com")) {
        sessionStorage.setItem("redirected", "true"); 
        window.location.href = "https://mobile-site.onrender.com";
    } else if (!userAgent.includes("mobile") && !currentURL.includes("makadamia.onrender.com")) {
        sessionStorage.setItem("redirected", "true"); 
        window.location.href = "https://makadamia.onrender.com";
    }
};
async function loadProductMap() {
    try {
        const response = await fetch('https://makadamia.onrender.com/api/products');
        const products = await response.json();
        products.forEach(product => {
            productMap[product._id] = { name: product.name, price: product.price };
        });
        console.log("‚úÖ Product Map –∑–∞–≥—Ä—É–∂–µ–Ω:", productMap);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ productMap:", error);
    }
}


console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ /refresh");
console.log("–¢–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º:", localStorage.getItem("accessToken"));

document.addEventListener("DOMContentLoaded", async function () {
    const token = localStorage.getItem("accessToken");

    if (!token && !sessionStorage.getItem("authChecked")) {
    sessionStorage.setItem("authChecked", "true");
    await refreshAccessToken();
}

    const cartButton = document.getElementById("cartButton");
    const cartDropdown = document.getElementById("cartDropdown");

    if (cartButton && cartDropdown) {
        cartButton.addEventListener("click", function (event) {
            event.stopPropagation();
            cartDropdown.style.display = cartDropdown.style.display === "block" ? "none" : "block";
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫—Ä–µ—Å—Ç–∏–∫
        const closeCartButton = document.createElement("span");
        closeCartButton.innerHTML = "‚úñ";
        closeCartButton.style.cursor = "pointer";
        closeCartButton.style.position = "absolute";
        closeCartButton.style.top = "10px";
        closeCartButton.style.right = "10px";
        closeCartButton.style.fontSize = "1.2em";
        closeCartButton.style.color = "black";
        closeCartButton.addEventListener("click", function (event) {
            event.stopPropagation();
            cartDropdown.style.display = "none";
        });

        cartDropdown.prepend(closeCartButton);
    } else {
        console.warn("‚ùå cartButton –∏–ª–∏ cartDropdown –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!");
    }
});

document.addEventListener("DOMContentLoaded", function () {
    if (!localStorage.getItem("cookiesAccepted")) {
        showCookieBanner();
    }
});

function showCookieBanner() {
    const banner = document.createElement("div");
    banner.innerHTML = `
        <div id="cookie-banner" style="position: fixed; bottom: 0; width: 100%; background: black; color: white; padding: 10px; text-align: center; z-index: 1000;">
            <p>–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º cookies –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å–∞–π—Ç–∞. –û–Ω–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ –∞–∫–∫–∞—É–Ω—Ç–µ –¥–æ–ª—å—à–µ, —Ç–∞–∫ –∫–∞–∫ –º—ã –ø–µ—Ä–µ–¥–∞—ë–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é –Ω–∏—Ö. 
            <button id="acceptCookies" style="margin-left: 10px;">–ü—Ä–∏–Ω—è—Ç—å</button></p>
        </div>
    `;
    document.body.appendChild(banner);

    document.getElementById("acceptCookies").addEventListener("click", function () {
        localStorage.setItem("cookiesAccepted", "true");
        banner.remove();
    });
}


document.addEventListener("DOMContentLoaded", function () {
    initializeAddToCartButtons();  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É"
    renderCart(); 
    if (localStorage.getItem("cookiesAccepted") === "true") {
        const token = localStorage.getItem("accessToken"); // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω

        if (!token) {
            console.warn("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞, –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º /account");
            return;
        }

        fetch("https://makadamia.onrender.com/account", {
            method: "GET", // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —è–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞
            credentials: "include", // ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º cookies
            headers: {
                "Authorization": `Bearer ${token}` // ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–∫–µ–Ω
            }
        })
        .then(response => {
            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status}`);
            }
            return response.json();
        })
        .then(data => console.log("‚úÖ –î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞:", data))
        .catch(error => console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞:", error));
    } else {
        console.log("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–Ω—è–ª cookies. –ó–∞–ø—Ä–æ—Å –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.");
    }
});
function updateProductControls(productName, price) {
    const addButton = document.getElementById(`addButton_${productName}`);
    const removeButton = document.getElementById(`removeBtn_${productName}`);
    const quantityDisplay = document.getElementById(`quantity_${productName}`);
    const addButtonInc = document.getElementById(`addBtn_${productName}_inc`);
    
    if (addButton) {
        addButton.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å"
    }
    if (removeButton) {
        removeButton.style.display = 'inline-block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "-"
    }
    if (quantityDisplay) {
        quantityDisplay.style.display = 'inline-block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
    }
    if (addButtonInc) {
        addButtonInc.style.display = 'inline-block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "+"
    }

    const item = cartItems.find(item => item.productName === productName);
    if (item && quantityDisplay) {
        quantityDisplay.innerText = item.quantity;  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
    }
}

function updateAddToCartButton(productId) {
    const addToCartButton = document.querySelector(`.add-to-cart-button[data-id="${productId}"]`);
    if (addToCartButton) {
        addToCartButton.textContent = "–í –∫–æ—Ä–∑–∏–Ω–µ";
        addToCartButton.disabled = true;
    }
}
async function handleCheckoutFormSubmit(event) {
    event.preventDefault();
    const token = localStorage.getItem("accessToken");

    if (!token) {
        alert("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!");
        return;
    }

    const cart = loadCartFromLocalStorage();
    const items = Object.keys(cart).map(productId => ({
        productId: productId,
        quantity: cart[productId].quantity
    }));

    const nameInput = document.getElementById('customerName');
    const addressInput = document.getElementById('customerAddress');
    const additionalInfoInput = document.getElementById('additionalInfo');
    const userId = localStorage.getItem("userId");

    const orderData = {
        userId: userId,
        name: nameInput.value,
        address: addressInput.value,
        additionalInfo: additionalInfoInput.value,
        items: items
    };

    console.log("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞:", orderData);

    try {
        const response = await fetch("https://makadamia.onrender.com/api/order", {
            method: "POST",
            headers: {
                "Authorization": `Bearer ${token}`,
                "Content-Type": "application/json"
            },
            body: JSON.stringify(orderData)
        });

        console.log("üì• –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response);

        if (!response.ok) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ ${response.status}:`, response.statusText);
            alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.");
            return;
        }

        const responseData = await response.json();
        console.log("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω:", responseData);

        alert("üéâ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!");
        saveCartToLocalStorage({});
        window.location.href = "index.html";
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞:", error);
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.");
    }
}
document.addEventListener("DOMContentLoaded", () => {
    renderCheckoutCart();
    loadUserData();
    initializeAddToCartButtons();

    const backToShoppingButton = document.getElementById("backToShopping");
    if (backToShoppingButton) {
        backToShoppingButton.addEventListener("click", () => {
            window.location.href = "index.html";
        });
    }

    const checkoutForm = document.getElementById("checkoutForm");
    if (checkoutForm) {
        checkoutForm.addEventListener("submit", handleCheckoutFormSubmit);
    }
});
function initializeAddToCartButtons() {
    const addToCartButtons = document.querySelectorAll(".add-to-cart-button");
    addToCartButtons.forEach(button => {
        const productId = button.getAttribute("data-id");
        const productName = button.getAttribute("data-name");
        const productPrice = parseFloat(button.getAttribute("data-price"));

        button.addEventListener("click", () => {
            addToCart(productId, productName, productPrice);
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
        const cart = loadCartFromLocalStorage();
        if (cart[productId]) {
            updateAddToCartButton(productId);
        }
    });
}
function getCartItems() {
    const stored = localStorage.getItem('cartItems');
    if (!stored) return [];
    try {
        const parsed = JSON.parse(stored);
        return Array.isArray(parsed) ? parsed : [];
    } catch (err) {
        return [];
    }
}

function updateProductControls(productName, price) {
    document.getElementById(`addButton_${productName}`).style.display = 'none';
    document.getElementById(`removeBtn_${productName}`).style.display = 'inline-block';
    document.getElementById(`quantity_${productName}`).style.display = 'inline-block';
    document.getElementById(`addBtn_${productName}_inc`).style.display = 'inline-block';

    const item = cartItems.find(item => item.productName === productName);
    if (item) {
        document.getElementById(`quantity_${productName}`).innerText = item.quantity;
    }
}

function addToCart(productId, productName, price) {
    let cartItems = getCartItems();  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã

    const existingItem = cartItems.find(item => item.productId === productId);
    if (existingItem) {
        // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        existingItem.quantity += 1;
    } else {
        // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º 1
        cartItems.push({ productId, productName, price, quantity: 1 });
    }

    localStorage.setItem('cartItems', JSON.stringify(cartItems));  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä–∑–∏–Ω—É –≤ localStorage
    renderCart();  // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
    updateProductControls(productName, price);  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ç–æ–≤–∞—Ä–∞
}

function renderCart() {
    const cartContainer = document.getElementById('cart-container');  // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã
    cartContainer.innerHTML = '';  // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–µ—Ä–µ–¥ —Ä–µ–Ω–¥–µ—Ä–æ–º

    const cartItems = getCartItems();  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    cartItems.forEach(item => {
        const itemElement = document.createElement('div');
        itemElement.innerHTML = `
            ${item.productName} - ${item.quantity} x ${item.price} ‚ÇΩ
            <button onclick="decreaseQuantity('${item.productId}')">-</button>
            <span id="quantity-${item.productId}">${item.quantity}</span>
            <button onclick="increaseQuantity('${item.productId}', ${item.price})">+</button>
        `;
        cartContainer.appendChild(itemElement);  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–æ—Ä–∑–∏–Ω—ã
    });

    updateTotal();  // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É –∫–æ—Ä–∑–∏–Ω—ã
}

function updateTotal() {
    const cartItems = getCartItems();  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    const total = cartItems.reduce((sum, item) => sum + (item.quantity * item.price), 0);  // –°—É–º–º–∏—Ä—É–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤
    document.getElementById('total-amount').innerText = `–ò—Ç–æ–≥–æ: ${total} ‚ÇΩ`;  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É
}


function updateQuantityDisplay(productName) {
    const quantityElement = document.getElementById(`quantity_${productName}`);
    if (quantityElement) {
        quantityElement.textContent = cart[productName].quantity;
    }
}
function checkForEmptyCart(productName) {
    const quantity = cart[productName] ? cart[productName].quantity : 0;
    const addButton = document.getElementById(`addButton_${productName}`);
    const controls = document.getElementById(`controls_${productName}`);

    // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ —Ä–∞–≤–Ω–æ –Ω—É–ª—é, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å"
    if (quantity === 0) {
        if (addButton) addButton.style.display = 'inline-block';  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å"
        if (controls) controls.style.display = 'none';  // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ "+" –∏ "-"
    }
}

// –£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
function decrementItem(productName) {
    if (cart[productName]) {
        cart[productName].quantity -= 1;

        const quantityDisplay = document.getElementById(`quantity_${productName}`);
        const addButton = document.getElementById(`addButton_${productName}`);
        const removeButton = document.getElementById(`removeBtn_${productName}`);
        const addButtonControl = document.getElementById(`addBtn_${productName}`);

        if (cart[productName].quantity === 0) {
            // –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
            delete cart[productName];

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å", —Å–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            addButton.style.display = "inline-block";
            removeButton.style.display = "none";
            addButtonControl.style.display = "none";
            quantityDisplay.style.display = "none";
        } else {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ
            if (quantityDisplay) {
                quantityDisplay.textContent = cart[productName].quantity;
                quantityDisplay.style.display = "inline-block";
            }
        }

        saveCartToLocalStorage();
        updateCartDisplay();
        replaceAddButtonWithControls(productName);  // –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
    }
}
// –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
function increaseQuantity(productId, price) {
    let cartItems = getCartItems();  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    const product = cartItems.find(item => item.productId === productId);

    if (product) {
        product.quantity += 1;  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
    }

    localStorage.setItem('cartItems', JSON.stringify(cartItems));  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É
    renderCart();  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
    updateProductControls(product.productName, price);  // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
function decreaseQuantity(productId) {
    let cartItems = getCartItems();  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    const product = cartItems.find(item => item.productId === productId);

    if (product && product.quantity > 1) {
        product.quantity -= 1;  // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
    }

    localStorage.setItem('cartItems', JSON.stringify(cartItems));  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É
    renderCart();  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
    updateProductControls(product.productName, product.price);  // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
}



function decrementItem(productId) {
    let cartData = localStorage.getItem('cartItems');
    let cartItems = Array.isArray(JSON.parse(cartData)) ? JSON.parse(cartData) : [];
    const itemIndex = cartItems.findIndex(item => item.productId === productId);

    if (itemIndex > -1) {
        cartItems[itemIndex].quantity -= 1;
        if (cartItems[itemIndex].quantity === 0) {
            cartItems.splice(itemIndex, 1);
        }
        localStorage.setItem('cartItems', JSON.stringify(cartItems));
        renderCart();
    }
}

function updateQuantityDisplay(productName) {
    const quantityElement = document.getElementById(`quantity_${productName}`);
    if (quantityElement) {
        quantityElement.textContent = cart[productName].quantity;
    }
}
function getCookie(name) {
    const match = document.cookie.match(new RegExp('(^| )' + name + '=([^;]+)'));
    return match ? match[2] : null;
}
// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å" –≤ –∫–æ–Ω—Ç—Ä–æ–ª—ã "+", "-", –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
function replaceAddButtonWithControls(productId) {
    const addButton = document.getElementById(`addButton_${productId}`);
    const removeButton = document.getElementById(`removeBtn_${productId}`);
    const addButtonControl = document.getElementById(`addBtn_${productId}`);
    const quantityDisplay = document.getElementById(`quantity_${productId}`);

    let cartItems = getCartItems();
    const item = cartItems.find(item => item.productId === productId);

    if (item) {
        addButton.style.display = "none";
        removeButton.style.display = "inline-block";
        addButtonControl.style.display = "inline-block";
        quantityDisplay.style.display = "inline-block";
        quantityDisplay.textContent = item.quantity;
    } else {
        addButton.style.display = "inline-block";
        removeButton.style.display = "none";
        addButtonControl.style.display = "none";
        quantityDisplay.style.display = "none";
    }
}

function revertControlsToAddButton(productId) {
    const addButton = document.getElementById(`addButton_${productId}`);
    const removeButton = document.getElementById(`removeBtn_${productId}`);
    const addButtonControl = document.getElementById(`addBtn_${productId}`);
    const quantityDisplay = document.getElementById(`quantity_${productId}`);

    if (!addButton || !removeButton || !addButtonControl || !quantityDisplay) {
        console.warn(`‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${productId}`);
        return;
    }

    // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ 0, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å" –∏ —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
    addButton.style.display = "inline-block";  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å"
    removeButton.style.display = "none";  // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "-"
    addButtonControl.style.display = "none";  // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "+"
    quantityDisplay.style.display = "none";  // –°–∫—Ä—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
}

//–æ—â–∏—á–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
document.addEventListener('DOMContentLoaded', () => {
    const clearCartButton = document.getElementById('clear-cart');
    const cartTotal = document.getElementById('totalAmount');

    if (clearCartButton) {
        clearCartButton.addEventListener('click', () => {
            cart = {};  
            const username = localStorage.getItem("username") || "guest";
            localStorage.removeItem(`cart_${username}`); 
            updateCartDisplay();  
            cartTotal.textContent = '–ò—Ç–æ–≥–æ: 0 ‚ÇΩ';

            const productCards = document.querySelectorAll(".card-dish");
            productCards.forEach(card => {
                const addButton = card.querySelector(".add-button-size");
                const removeButton = card.querySelector(".quantity-control");
                const addButtonControl = card.querySelector(".quantity-size-button");
                const quantityDisplay = card.querySelector(".quantity-display");

                if (addButton) addButton.style.display = "inline-block";
                if (removeButton) removeButton.style.display = "none";
                if (addButtonControl) addButtonControl.style.display = "none";
                if (quantityDisplay) {
                    quantityDisplay.textContent = "";
                    quantityDisplay.style.display = "none";
                }
            });
        });  
    }  // <-- –í–û–¢ –≠–¢–û –î–û–ë–ê–í–õ–Ø–ï–®–¨!
});

document.addEventListener("DOMContentLoaded", () => {
    const token = localStorage.getItem("accessToken");
    const userId = localStorage.getItem("userId"); // –ü–æ–ª—É—á–∞–µ–º userId

    if (!token || !userId) {
        console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
        return;
    }

    fetch(`https://makadamia.onrender.com/user-orders/${userId}`, { 
        method: "GET",
        headers: {
            "Authorization": `Bearer ${token}`
        }
    })

    .then(res => res.json())
    .then(orders => {
        const container = document.getElementById("ordersContainer"); // –ë–ª–æ–∫ —Å —Ç–∞–∫–∏–º id

        if (orders.length === 0) {
            container.innerHTML = "<p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.</p>";
            return;
        }

        orders.forEach(order => {
            const orderDiv = document.createElement("div");
            orderDiv.classList.add("order");

            orderDiv.innerHTML = `
                <h3>–ó–∞–∫–∞–∑ ‚Ññ${order._id}</h3>
                <p>–ê–¥—Ä–µ—Å: ${order.address}</p>
                <p>–î–∞—Ç–∞: ${new Date(order.createdAt).toLocaleDateString()}</p>
                <ul>
                    ${order.items.map(item => `
                        <li>${item.productId.name} ‚Äî ${item.quantity} —à—Ç. (${item.productId.price} ‚ÇΩ)</li>
                    `).join("")}
                </ul>
                <hr>
            `;
            container.appendChild(orderDiv);
        });
    })
    .catch(err => {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:", err);
    });
});
// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
function updateCartDisplay() {
    const cartItems = document.getElementById("cartItems");
    if (!cartItems) return;

    cartItems.innerHTML = ""; // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    let totalAmount = 0;

    for (const productId in cart) {
    const item = cart[productId]; // item = { name, price, quantity }
    const itemTotal = item.price * item.quantity;
    totalAmount += itemTotal;

    const cartItem = document.createElement("div");
    cartItem.className = "cart-item";
    cartItem.setAttribute("data-id", productId); // –ù–∞–∑–æ–≤—ë–º —á–µ—Å—Ç–Ω–æ productId, –∞ –Ω–µ name
    cartItem.innerHTML = `
        <div class="item-info">${item.name} - ${itemTotal} ‚ÇΩ</div>
        <div class="cart-buttons">
            <button onclick="decrementItem('${productId}')">-</button>
            <span class="quantity">${item.quantity}</span>
            <button onclick="incrementItem('${productId}', ${item.price})">+</button>
        </div>
    `;
    cartItems.appendChild(cartItem);
}


    document.getElementById("totalAmount").textContent = `–ò—Ç–æ–≥–æ: ${totalAmount} ‚ÇΩ`;

    // –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, —Å–∫—Ä—ã–≤–∞–µ–º –µ—ë
    if (Object.keys(cart).length === 0) {
        document.getElementById("cartDropdown").style.display = "none";
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ
function updateCartDisplay() {
    const cartItems = document.getElementById("cartItems");
    if (!cartItems) return;

    cartItems.innerHTML = ""; // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    let totalAmount = 0;

    for (const item in cart) {
        const itemTotal = cart[item].price * cart[item].quantity;
        totalAmount += itemTotal;

        const cartItem = document.createElement("div");
        cartItem.className = "cart-item";
        cartItem.setAttribute("data-name", item); // –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
        cartItem.innerHTML = `
            <div class="item-info">${item} - ${itemTotal} ‚ÇΩ</div>
            <div class="cart-buttons">
                <button onclick="decrementItem('${item}')">-</button>
                <span class="quantity">${cart[item].quantity}</span>
                <button onclick="incrementItem('${item}', ${cart[item].price})">+</button>
            </div>
        `;
        cartItems.appendChild(cartItem);
    }

    document.getElementById("totalAmount").textContent = `–ò—Ç–æ–≥–æ: ${totalAmount} ‚ÇΩ`;

    // –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, —Å–∫—Ä—ã–≤–∞–µ–º –µ—ë
    if (Object.keys(cart).length === 0) {
        document.getElementById("cartDropdown").style.display = "none";
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –≤ localStorage
function saveCartToLocalStorage(cart) {
    localStorage.setItem(`cart_${localStorage.getItem("username")}`, JSON.stringify(cart));
}
function renderCheckoutCart() {
    const cart = loadCartFromLocalStorage();
    const cartItemsContainer = document.getElementById("cartItems");
    const cartTotalPrice = document.getElementById("cartTotalPrice");

    cartItemsContainer.innerHTML = "";
    let totalPrice = 0;

    for (const productId in cart) {
        const item = cart[productId];
        const itemTotalPrice = item.price * item.quantity;
        totalPrice += itemTotalPrice;

        const cartItemElement = document.createElement("div");
        cartItemElement.className = "cart-item";
        cartItemElement.innerHTML = `
            <span class="item-name">${item.name}</span>
            <span class="item-quantity">${item.quantity} —à—Ç.</span>
            <span class="item-price">${itemTotalPrice.toFixed(2)} ‚ÇΩ</span>
        `;
        cartItemsContainer.appendChild(cartItemElement);
    }

    cartTotalPrice.textContent = totalPrice.toFixed(2) + " ‚ÇΩ";
}
function updateTotal() {
    const cartItems = getCartItems();
    const total = cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);
    const totalAmount = document.getElementById('totalAmount');
    if (totalAmount) {
        totalAmount.textContent = `–ò—Ç–æ–≥–æ: ${total} ‚ÇΩ`;
    }
}

// –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
function checkout() {
    alert("–í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!");
    cart = {};
    updateCartDisplay();
    resetAddToCartButtons();
    saveCartToLocalStorage();
    toggleCart();
}

// –°–±—Ä–æ—Å –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–î–æ–±–∞–≤–∏—Ç—å"
function resetAddToCartButtons() {
    for (const itemName in cart) {
        revertControlsToAddButton(itemName);
    }
}
function loadCartFromLocalStorage() {
    const storedCart = JSON.parse(localStorage.getItem(`cart_${localStorage.getItem("username")}`)) || {};
    return storedCart;
}
// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –∏–∑ localStorage –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener("DOMContentLoaded", () => {
    loadCartFromLocalStorage();
    const cartModal = document.getElementById("cartModal");
    if (cartModal) cartModal.style.display = "none";
});

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã
function getCookie(name) {
    const match = document.cookie.match(new RegExp('(^| )' + name + '=([^;]+)'));
    return match ? match[2] : null;
}

async function fetchWithAuth(url, options = {}) {
    let token = localStorage.getItem("accessToken");

    if (!token) {
        console.warn("‚ùå –ù–µ—Ç accessToken, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å...");
        token = await refreshAccessToken();
        if (!token) return null;
    }

    const res = await fetch(url, {
        ...options,
        headers: {
            ...options.headers,
            Authorization: `Bearer ${token}`  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        }
    });

    if (res.status === 401) {
        console.warn("üîÑ –¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å...");
        token = await refreshAccessToken();
        if (!token) return res;

        return fetch(url, {
            ...options,
            headers: { ...options.headers, Authorization: `Bearer ${token}` },
        });
    }

    return res;
}
document.addEventListener('DOMContentLoaded', async () => {
    const accessToken = localStorage.getItem('accessToken');  // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ localStorage

    if (accessToken) {
        document.getElementById('authButton').textContent = '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç';  // –ò–∑–º–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫—É
        await loadUserData(accessToken);  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    } else {
        document.getElementById('authButton').textContent = '–í—Ö–æ–¥';  // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º "–í—Ö–æ–¥"
    }
});


function getTokenExp(token) {
    try {
        const payload = JSON.parse(atob(token.split(".")[1]));
        return payload.exp;
    } catch (e) {
        return null;
    }
}


async function refreshAccessToken() {
    console.log("üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...");

    const token = localStorage.getItem("accessToken"); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
    if (!token) {
        console.warn("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ");
        return null; // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    }

    try {
        const response = await fetch("https://makadamia.onrender.com/refresh", {
            method: "POST",
            credentials: 'include'
        });

        if (!response.ok) {
            console.warn(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ (${response.status})`);
            return null;
        }

        const data = await response.json();
        console.log("‚úÖ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω:", data.accessToken);
        localStorage.setItem("accessToken", data.accessToken);  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
        return data.accessToken;
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:", error);
        return null;
    }
}


function generateTokens(user, site) {
    const issuedAt = Math.floor(Date.now() / 1000);
    
    const accessToken = jwt.sign(
        { id: user._id, username: user.username, iat: issuedAt },
        JWT_SECRET,
        { expiresIn: "30m" }  // ‚è≥ Access-—Ç–æ–∫–µ–Ω –Ω–∞ 30 –º–∏–Ω—É—Ç
    );

    const refreshToken = jwt.sign(
        { id: user._id, username: user.username, site, iat: issuedAt },
        REFRESH_SECRET,
        { expiresIn: "7d" }  // üîÑ Refresh-—Ç–æ–∫–µ–Ω –Ω–∞ 7 –¥–Ω–µ–π
    );

    return { accessToken, refreshToken };
}


function isTokenExpired(token) {
    if (!token) return true; // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç, –æ–Ω —Å—á–∏—Ç–∞–µ—Ç—Å—è –∏—Å—Ç–µ–∫—à–∏–º

    try {
        const base64 = token.split(".")[1].replace(/-/g, "+").replace(/_/g, "/"); // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º base64
        const payload = JSON.parse(atob(base64)); // –î–µ–∫–æ–¥–∏—Ä—É–µ–º payload
        return (Date.now() / 1000) >= payload.exp; // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    } catch (e) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", e);
        return true;
    }
}


// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ–∫–µ–Ω–∞ —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
setInterval(() => {
    if (isTokenExpired()) {
      console.log("‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...");
        console.log("üîÑ –¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, –æ–±–Ω–æ–≤–ª—è–µ–º...");
        refreshAccessToken().then(newToken => {
            console.log("‚úÖ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –ø–æ—Å–ª–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", newToken);
        }).catch(err => console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", err));
    }
}, 60000); // 1 —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É

function editField(field) {
    const input = document.getElementById(field + "Input");
    console.log("–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ–ª–µ:", field, "–ó–Ω–∞—á–µ–Ω–∏–µ:", input.value);

    if (input.disabled) {
        input.disabled = false;
        input.focus();
    } else {
        fetch("https://makadamia.onrender.com/account", {
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${localStorage.getItem("accessToken")}`
            },
            body: JSON.stringify({ [field]: input.value }) // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        })
        .then(response => response.json())
        .then(data => {
            console.log("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data);
            input.disabled = true;
        })
        .catch(error => console.log("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:", error));
    }
}

document.addEventListener("DOMContentLoaded", () => {
    const token = localStorage.getItem("accessToken");

    if (!token) {
        console.warn("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞, –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º /account");
        return;
    }

    fetch("https://makadamia.onrender.com/account", {
        method: "GET", // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —è–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞
        headers: { 
            "Authorization": `Bearer ${token}` // ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–∫–µ–Ω
        }
    })
    .then(res => {
        if (!res.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${res.status}`);
        }
        return res.json();
    })
    .then(data => {
        const nameInput = document.getElementById("nameInput");
        const cityInput = document.getElementById("cityInput");

        if (nameInput) nameInput.value = data.name || "";
        if (cityInput) cityInput.value = data.city || "";
    })
    .catch(error => console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:", error));
});

document.addEventListener("DOMContentLoaded", () => {
    console.log("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞");

    const editNameBtn = document.getElementById("editName");
    const editCityBtn = document.getElementById("editCity");

    if (editNameBtn) {
        editNameBtn.addEventListener("click", () => editField("name"));
    } else {
        console.warn("–ö–Ω–æ–ø–∫–∞ editName –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
    }

    if (editCityBtn) {
        editCityBtn.addEventListener("click", () => editField("city"));
    } else {
        console.warn("–ö–Ω–æ–ø–∫–∞ editCity –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
    }
});
// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function checkAuthStatus() {
    const token = localStorage.getItem("accessToken"); // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å accessToken
    const username = localStorage.getItem("username");
    const authButton = document.getElementById("authButton");
    const cabinetButton = document.getElementById("cabinetButton");

    if (!authButton || !cabinetButton) {
        console.warn("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–Ω–æ–ø–∫–∏ '–í—Ö–æ–¥' –∏–ª–∏ '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'!");
        return;
    }

    if (token && username && !isTokenExpired(token)) { 
        console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
        authButton.style.display = "none";
        cabinetButton.style.display = "inline-block";
    } else {
        console.log("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
        authButton.style.display = "inline-block";
        cabinetButton.style.display = "none";
        sessionStorage.removeItem("authChecked");
    }
}

async function logout() {
    const token = localStorage.getItem("accessToken"); // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω

    try {
        const response = await fetch("https://makadamia.onrender.com/logout", {
            method: "POST",
            credentials: 'include', // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–µ–º cookies
            headers: {
                "Authorization": `Bearer ${token}`  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞
            }
        });

        if (response.ok) {
            // –û—á–∏—Å—Ç–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏ cookies
            localStorage.removeItem('accessToken');
            localStorage.removeItem('userId');
            localStorage.removeItem('username');
            document.cookie = "accessToken=; path=/; expires=Thu, 01 Jan 1970 00:00:00 UTC;";
            document.cookie = "refreshToken=; path=/; expires=Thu, 01 Jan 1970 00:00:00 UTC;";
            
            window.location.href = "/index.html"; // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
        } else {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:", response.status);
        }
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:", error);
    }
}


function handleAuthClick() {
    const token = localStorage.getItem('accessToken');
    if (token) {
        window.location.href = 'account.html';
    } else {
        window.location.href = 'login.html';
    }
}

// –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
function openCabinet() {
    const token = localStorage.getItem('accessToken');
    const username = localStorage.getItem('username');

   if (!token && !sessionStorage.getItem("authFailed")) {
    alert("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...");
    window.location.href = "/login.html";
    } else {
        // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
        window.location.href = "/account.html";
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener("DOMContentLoaded", function () {
    checkAuthStatus();

    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ "–í—ã—Ö–æ–¥" –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ
    const logoutButton = document.getElementById('logoutButton');
    if (logoutButton && window.location.pathname !== '/account.html') {
        logoutButton.style.display = 'none';
    }
});

// –†–∞—Å—á–µ—Ç –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ä–∑–∏–Ω—ã
function calculateBalance() {
    let balance = 0;
    for (const item in cart) {
        balance += cart[item].price * cart[item].quantity;
    }
    return balance;
}
// –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
function goToCheckoutPage() {
    saveCartToLocalStorage();
    window.location.href = "checkout.html";
}


document.addEventListener("DOMContentLoaded", () => {
    const token = localStorage.getItem('accessToken'); // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ localStorage
    if (!token) {
        document.getElementById('usernameDisplay').innerText = "–ì–æ—Å—Ç—å";
        return;
    }

    fetch("https://makadamia.onrender.com/account", {
        method: "GET",
        credentials: "include", // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥–∞—á—É cookies
        headers: {
            Authorization: `Bearer ${token}`
        }
    })
    .then(res => {
        if (!res.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${res.status}`);
        }
        return res.json();
    })
    .then(data => {
        if (data.username) {
            document.getElementById('usernameDisplay').innerText = data.username;
            document.getElementById('authButton').style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º "–í—Ö–æ–¥"
            document.getElementById('cabinetButton').style.display = 'inline-block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"
        } else {
            document.getElementById('usernameDisplay').innerText = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏";
        }
    })
    .catch(error => {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞:", error);
        document.getElementById('usernameDisplay').innerText = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏";
    });
});
async function updateAccount(newUsername, newPassword) {
  const token = localStorage.getItem("accessToken");

  const response = await fetch("https://makadamia.onrender.com/account", {
    method: "PUT",
    headers: {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${token}` // –ë–µ–∑ —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª–æ–Ω–∏—Ç –∑–∞–ø—Ä–æ—Å
    },
    body: JSON.stringify({ username: newUsername, password: newPassword }),
  });

  const data = await response.json();
  console.log("–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data);
}

function loadUserData() {
    const customerNameInput = document.getElementById("customerName");
    const customerAddressInput = document.getElementById("customerAddress");
    const additionalInfoInput = document.getElementById("additionalInfo");

    const userData = JSON.parse(localStorage.getItem("userData")) || {};

    if (customerNameInput) customerNameInput.value = userData.name || "";
    if (customerAddressInput) customerAddressInput.value = userData.address || "";
    if (additionalInfoInput) additionalInfoInput.value = userData.additionalInfo || "";
}


// –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –∫–æ–¥ –≤ `script.js` –∑–∞–≥—Ä—É–∂–µ–Ω –ø–µ—Ä–µ–¥ –µ–≥–æ –≤—ã–∑–æ–≤–æ–º –≤ HTML
document.addEventListener("DOMContentLoaded", function () {
    const authButton = document.getElementById("authButton");
    if (authButton) {
        authButton.onclick = handleAuthClick;
    }
});
async function loadOrders() {
    const token = localStorage.getItem("accessToken");
    if (!token) {
        alert("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!");
        return;
    }

    try {
        const response = await fetch("https://makadamia.onrender.com/orders", {
            method: "GET",
            headers: {
                "Authorization": `Bearer ${token}`,
                "Content-Type": "application/json"
            }
        });

        if (!response.ok) {
            throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤");
        }

        const orders = await response.json();
        displayOrders(orders); // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤:", error);
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤");
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
function displayOrders(orders) {
    const ordersContainer = document.getElementById("ordersContainer");
    const noOrdersMessage = document.getElementById("noOrdersMessage");

    // –ï—Å–ª–∏ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (orders.length === 0) {
        noOrdersMessage.style.display = 'block';
        return;
    } else {
        noOrdersMessage.style.display = 'none';
    }

    ordersContainer.innerHTML = ""; // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä

    orders.forEach(order => {
        const orderElement = document.createElement("div");
        orderElement.classList.add("order");

        orderElement.innerHTML = `
            <h3>–ó–∞–∫–∞–∑ ‚Ññ${order._id}</h3>
            <p>–ê–¥—Ä–µ—Å: ${order.address}</p>
            <p>–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${order.additionalInfo || "–ù–µ—Ç"}</p>
            <p>–°—Ç–∞—Ç—É—Å: <strong>${order.status}</strong></p>
            <p>–î–∞—Ç–∞: ${new Date(order.createdAt).toLocaleDateString()}</p>
            <ul>
                ${order.items.map(item => `
                    <li>${item.productId} - ${item.quantity} —à—Ç.</li>
                `).join("")}
            </ul>
        `;
        ordersContainer.appendChild(orderElement);
    });
}
